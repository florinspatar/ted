/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package nu.ted.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class SeriesSearchResult implements TBase<SeriesSearchResult._Fields>, java.io.Serializable, Cloneable, Comparable<SeriesSearchResult> {
  private static final TStruct STRUCT_DESC = new TStruct("SeriesSearchResult");

  private static final TField SEARCH_UID_FIELD_DESC = new TField("searchUID", TType.STRING, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);

  private String searchUID;
  private String name;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SEARCH_UID((short)1, "searchUID"),
    NAME((short)2, "name");

    private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byId.put((int)field._thriftId, field);
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      return byId.get(fieldId);
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
    put(_Fields.SEARCH_UID, new FieldMetaData("searchUID", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(SeriesSearchResult.class, metaDataMap);
  }

  public SeriesSearchResult() {
  }

  public SeriesSearchResult(
    String searchUID,
    String name)
  {
    this();
    this.searchUID = searchUID;
    this.name = name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SeriesSearchResult(SeriesSearchResult other) {
    if (other.isSetSearchUID()) {
      this.searchUID = other.searchUID;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
  }

  public SeriesSearchResult deepCopy() {
    return new SeriesSearchResult(this);
  }

  @Deprecated
  public SeriesSearchResult clone() {
    return new SeriesSearchResult(this);
  }

  public String getSearchUID() {
    return this.searchUID;
  }

  public SeriesSearchResult setSearchUID(String searchUID) {
    this.searchUID = searchUID;
    return this;
  }

  public void unsetSearchUID() {
    this.searchUID = null;
  }

  /** Returns true if field searchUID is set (has been asigned a value) and false otherwise */
  public boolean isSetSearchUID() {
    return this.searchUID != null;
  }

  public void setSearchUIDIsSet(boolean value) {
    if (!value) {
      this.searchUID = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public SeriesSearchResult setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEARCH_UID:
      if (value == null) {
        unsetSearchUID();
      } else {
        setSearchUID((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEARCH_UID:
      return getSearchUID();

    case NAME:
      return getName();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case SEARCH_UID:
      return isSetSearchUID();
    case NAME:
      return isSetName();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SeriesSearchResult)
      return this.equals((SeriesSearchResult)that);
    return false;
  }

  public boolean equals(SeriesSearchResult that) {
    if (that == null)
      return false;

    boolean this_present_searchUID = true && this.isSetSearchUID();
    boolean that_present_searchUID = true && that.isSetSearchUID();
    if (this_present_searchUID || that_present_searchUID) {
      if (!(this_present_searchUID && that_present_searchUID))
        return false;
      if (!this.searchUID.equals(that.searchUID))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SeriesSearchResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SeriesSearchResult typedOther = (SeriesSearchResult)other;

    lastComparison = Boolean.valueOf(isSetSearchUID()).compareTo(isSetSearchUID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(searchUID, typedOther.searchUID);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(name, typedOther.name);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      _Fields fieldId = _Fields.findByThriftId(field.id);
      if (fieldId == null) {
        TProtocolUtil.skip(iprot, field.type);
      } else {
        switch (fieldId) {
          case SEARCH_UID:
            if (field.type == TType.STRING) {
              this.searchUID = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
        }
        iprot.readFieldEnd();
      }
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.searchUID != null) {
      oprot.writeFieldBegin(SEARCH_UID_FIELD_DESC);
      oprot.writeString(this.searchUID);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SeriesSearchResult(");
    boolean first = true;

    sb.append("searchUID:");
    if (this.searchUID == null) {
      sb.append("null");
    } else {
      sb.append(this.searchUID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

